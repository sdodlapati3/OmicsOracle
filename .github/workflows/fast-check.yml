name: Fast Quality Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  CACHE_VERSION: v2

jobs:
  fast-check:
    name: "[FAST] Quality & Tests (< 90s)"
    runs-on: ubuntu-latest
    timeout-minutes: 2  # Hard timeout

    outputs:
      duration: ${{ steps.timing.outputs.duration }}

    steps:
      - name: "[GET] Checkout"
        uses: actions/checkout@v4

      - name: "[TIME] Start Timer"
        id: start-time
        run: echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: "[PYTHON] Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "[CACHE] Enhanced Caching"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-fast-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements*.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-fast-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-fast-

      - name: "[INSTALL] Lightning Install"
        run: |
          python -m pip install --upgrade pip --quiet --no-warn-script-location
          # Install minimal core dependencies for speed
          pip install --quiet black isort ruff pytest pytest-asyncio mypy pydantic pyyaml click
          pip install --quiet -e .

      - name: "[ASCII] ASCII Enforcement"
        run: |
          python scripts/ascii_enforcer.py
          echo "[PASS] ASCII enforcement: PASSED"

      - name: "[QUALITY] Parallel Code Quality"
        run: |
          echo "::group::Code Quality (Parallel)"
          start_time=$(date +%s)

          # Run all checks in parallel for maximum speed
          black --check --quiet src/ tests/ scripts/ --line-length 80 &
          PID1=$!
          isort --check-only --quiet src/ tests/ scripts/ --profile black &
          PID2=$!
          ruff check src/ tests/ scripts/ --quiet &
          PID3=$!
          # Two-tier line length check (hard limit 110, soft target 80)
          flake8 src/ tests/ scripts/ --max-line-length=110 --quiet &
          PID4=$!

          # Wait for all and capture results
          wait $PID1 && wait $PID2 && wait $PID3 && wait $PID4

          # Soft warning for 80-char limit (non-blocking)
          echo "::group::Soft Line Length Check (80 chars)"
          if ! flake8 src/ tests/ scripts/ --max-line-length=80 --quiet; then
            echo "::warning::Some lines exceed 80 characters (soft limit)"
          else
            echo "[PASS] All lines within 80 character soft limit"
          fi
          echo "::endgroup::"

          end_time=$(date +%s)
          echo "[PASS] Code quality: PASSED ($(($end_time - $start_time))s)"
          echo "::endgroup::"

      - name: "[TYPE] Quick Type Check"
        run: |
          # Only check core modules for speed
          mypy src/omics_oracle/core/ --ignore-missing-imports --no-error-summary
          echo "[PASS] Type check: PASSED"

      - name: "[TEST] Essential Tests"
        run: |
          echo "::group::Essential Unit Tests"
          start_time=$(date +%s)

          # Run core validation tests only
          pytest tests/validation/ \
            --quiet \
            --tb=no \
            -x \
            --disable-warnings \
            --maxfail=1

          end_time=$(date +%s)
          echo "[PASS] Essential tests: PASSED ($(($end_time - $start_time))s)"
          echo "::endgroup::"

      - name: "[TIME] Calculate Duration"
        id: timing
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start-time.outputs.start-time }}
          duration=$(($end_time - $start_time))
          echo "duration=${duration}" >> $GITHUB_OUTPUT
          echo "[SUCCESS] Fast check completed in ${duration} seconds"

          if [ $duration -gt 60 ]; then
            echo "::warning::Fast check took ${duration}s (target: <60s)"
          else
            echo "[TARGET] Fast check within target: ${duration}s < 60s"
          fi

  performance-report:
    name: "[REPORT] Performance Monitor"
    runs-on: ubuntu-latest
    needs: fast-check
    if: always()

    steps:
      - name: "[METRICS] Log Performance"
        run: |
          echo "::group::Performance Report"
          echo "DURATION: ${{ needs.fast-check.outputs.duration }}s"
          echo "TARGET: <60s"
          echo "STATUS: ${{ needs.fast-check.result }}"

          if [ "${{ needs.fast-check.result }}" = "success" ]; then
            echo "[SUCCESS] Fast check passed"
          else
            echo "[FAILURE] Fast check failed"
          fi
          echo "::endgroup::"
