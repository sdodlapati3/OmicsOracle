name: Parallel CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      full_validation:
        description: 'Run full validation suite'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.12"
  CACHE_VERSION: v1

jobs:
  # ============================================================================
  # PARALLEL QUALITY CHECKS: Run all quality checks in parallel
  # ============================================================================
  ascii-check:
    name: "[ASCII] ASCII Enforcement"
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ASCII Enforcement Check
        run: |
          python scripts/ascii_enforcer.py
          echo "[PASS] ASCII enforcement validated"

  code-format:
    name: "[FORMAT] Code Formatting"
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install formatters
        run: |
          pip install --quiet black isort

      - name: Check formatting
        run: |
          black --check src/ tests/ scripts/ --line-length 80
          isort --check-only src/ tests/ scripts/ --profile black
          echo "[PASS] Code formatting validated"

  lint-check:
    name: "[LINT] Code Linting"
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linter
        run: |
          pip install --quiet ruff flake8

      - name: Run linting
        run: |
          ruff check src/ tests/ scripts/ --quiet
          flake8 src/ tests/ scripts/ --max-line-length=110 --quiet
          echo "[PASS] Code linting validated"

  type-check:
    name: "[TYPE] Type Checking"
    runs-on: ubuntu-latest
    timeout-minutes: 4

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --quiet -r requirements-dev.txt
          pip install --quiet -e .

      - name: Type checking
        run: |
          mypy src/omics_oracle/ --ignore-missing-imports --disable-error-code=misc
          echo "[PASS] Type checking validated"

  security-check:
    name: "[SECURITY] Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install --quiet bandit safety

      - name: Security scanning
        run: |
          bandit -r src/ --quiet -f json -o bandit-report.json || true
          safety check --quiet || true
          echo "[PASS] Security scan completed"

  # ============================================================================
  # PARALLEL TESTING: Run different test suites in parallel
  # ============================================================================
  unit-tests:
    name: "[TEST] Unit Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install test dependencies
        run: |
          pip install --quiet -r requirements-dev.txt
          pip install --quiet -e .

      - name: Run unit tests
        run: |
          if [[ -d "tests/unit" && $(find tests/unit -name "*.py" -not -name "__init__.py" | wc -l) -gt 0 ]]; then
            pytest tests/unit/ -v --cov=src/omics_oracle --cov-report=xml --tb=short
            echo "[PASS] Unit tests completed"
          else
            echo "[SKIP] No unit tests found"
          fi

      - name: Upload coverage
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  validation-tests:
    name: "[VALIDATE] Architecture Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --quiet -r requirements-dev.txt
          pip install --quiet -e .

      - name: Run validation tests
        run: |
          pytest tests/validation/ -v --tb=short
          echo "[PASS] Architecture validation completed"

  integration-tests:
    name: "[INTEGRATION] Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 6
    if: |
      github.ref == 'refs/heads/main' ||
      github.event_name == 'workflow_dispatch' ||
      github.event.inputs.full_validation == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install full dependencies
        run: |
          pip install --quiet -r requirements-dev.txt
          pip install --quiet -e .

      - name: Run integration tests
        run: |
          if [ -d "tests/integration" ]; then
            pytest tests/integration/ -v --tb=short
            echo "[PASS] Integration tests completed"
          else
            echo "[SKIP] No integration tests found"
          fi

  # ============================================================================
  # BUILD AND DEPLOY: Only for main branch
  # ============================================================================
  build-check:
    name: "[BUILD] Build Validation"
    runs-on: ubuntu-latest
    needs: [ascii-check, code-format, lint-check, type-check, unit-tests, validation-tests]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 4

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t omics-oracle:latest .
          echo "[PASS] Docker build successful"

      - name: Test Docker image
        run: |
          docker run --rm omics-oracle:latest --help
          echo "[PASS] Docker image functional"

  # ============================================================================
  # PERFORMANCE MONITORING: Track all job performance
  # ============================================================================
  performance-summary:
    name: "[SUMMARY] Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [ascii-check, code-format, lint-check, type-check, security-check, unit-tests, validation-tests]
    if: always()

    steps:
      - name: Pipeline Performance Report
        run: |
          echo "::group::Pipeline Summary"
          echo "ASCII Check: ${{ needs.ascii-check.result }}"
          echo "Code Format: ${{ needs.code-format.result }}"
          echo "Lint Check: ${{ needs.lint-check.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Security Check: ${{ needs.security-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Validation Tests: ${{ needs.validation-tests.result }}"
          echo "::endgroup::"

          # Check if any critical jobs failed
          if [[ "${{ needs.ascii-check.result }}" == "failure" ||
                "${{ needs.code-format.result }}" == "failure" ||
                "${{ needs.lint-check.result }}" == "failure" ||
                "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.validation-tests.result }}" == "failure" ]]; then
            echo "::error::Critical pipeline jobs failed"
            exit 1
          else
            echo "[SUCCESS] All critical pipeline jobs passed"
          fi
