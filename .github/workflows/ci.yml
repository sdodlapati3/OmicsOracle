name: OmicsOracle Main Branch CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      full_suite:
        description: 'Run complete test suite including integration tests'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.12"
  CACHE_VERSION: v1

jobs:
  comprehensive-validation:
    name: "[MAIN] Comprehensive Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Enhanced Caching
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          .venv
          ~/.local/share/spacy
        key: ${{ runner.os }}-main-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-main-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-
          ${{ runner.os }}-main-${{ env.CACHE_VERSION }}-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install -r requirements-dev.txt
        pip install -e .
        # Install spaCy models for NLP testing
        python -m spacy download en_core_web_sm || echo "SpaCy model download skipped for speed"

    - name: ASCII Enforcement
      run: |
        python scripts/ascii_enforcer.py
        echo "[PASS] ASCII enforcement validated"

    - name: Code Formatting (Black)
      run: |
        black --check --diff src/ tests/ scripts/ --line-length 80
        echo "[PASS] Black formatting validated"

    - name: Import Sorting (isort)
      run: |
        isort --check-only --diff src/ tests/ scripts/ --profile black
        echo "[PASS] Import sorting validated"

    - name: Type Checking (mypy)
      run: |
        mypy src/omics_oracle/ --ignore-missing-imports
        echo "[PASS] Type checking validated"
    - name: Linting (ruff & flake8)
      run: |
        ruff check src/ tests/ scripts/ --output-format=github
        flake8 src/ tests/ scripts/ --max-line-length=110 --quiet
        echo "[PASS] Linting validated"

    - name: Security Scan (bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json
        echo "[PASS] Security scan completed"

    - name: Dependency Vulnerability Scan
      run: |
        safety check --quiet || echo "[WARN] Safety check completed with warnings"

    - name: Architecture Validation Tests
      run: |
        pytest tests/validation/ -v --tb=short
        echo "[PASS] Architecture tests validated"

    - name: Unit Tests with Coverage
      run: |
        if [[ -d "tests/unit" && $(find tests/unit -name "*.py" -not -name "__init__.py" | wc -l) -gt 0 ]]; then
          pytest tests/unit/ -v --cov=src/omics_oracle --cov-report=xml --cov-report=term-missing --tb=short
          echo "[PASS] Unit tests completed"
        else
          echo "[SKIP] No unit tests found"
        fi
      if: always()

    - name: Integration Tests
      run: |
        if [[ -d "tests/integration" ]]; then
          pytest tests/integration/ -v --tb=short
          echo "[PASS] Integration tests completed"
        else
          echo "[SKIP] No integration tests found"
        fi
      if: github.event.inputs.full_suite == 'true' || github.event.inputs.full_suite == ''

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build-test:
    name: "[DOCKER] Build & Test"
    runs-on: ubuntu-latest
    needs: comprehensive-validation
    timeout-minutes: 8

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -t omics-oracle:latest .
        echo "[PASS] Docker build successful"

    - name: Test Docker Image
      run: |
        docker run --rm omics-oracle:latest --help
        docker run --rm omics-oracle:latest --version
        echo "[PASS] Docker image functional"

  deployment-ready:
    name: "[DEPLOY] Deployment Ready"
    runs-on: ubuntu-latest
    needs: [comprehensive-validation, docker-build-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deployment Status
      run: |
        echo "::group::Deployment Readiness Report"
        echo "Comprehensive Validation: ${{ needs.comprehensive-validation.result }}"
        echo "Docker Build Test: ${{ needs.docker-build-test.result }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "::endgroup::"

        if [[ "${{ needs.comprehensive-validation.result }}" == "success" &&
              "${{ needs.docker-build-test.result }}" == "success" ]]; then
          echo "[SUCCESS] OmicsOracle is ready for deployment"
        else
          echo "[FAILURE] Deployment blocked due to validation failures"
          exit 1
        fi
