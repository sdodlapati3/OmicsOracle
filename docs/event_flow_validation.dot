digraph "OmicsOracle Event Flow and Validation" {
    rankdir=LR;
    node [shape=box, style="filled", color="black", fillcolor="lightblue", fontname="Arial"];
    edge [fontname="Arial", fontsize=10];
    
    /* Define subgraphs for different stages */
    
    subgraph cluster_server {
        label="Server Initialization";
        style=filled;
        color=lightgrey;
        fontsize=14;
        
        server_start [label="Server Startup", fillcolor="cornflowerblue"];
        config_load [label="Config Loading"];
        ncbi_email_config [label="NCBI Email Config"];
        pipeline_init [label="Pipeline Initialization", fillcolor="cornflowerblue"];
        component_init [label="Component Initialization\n(GEO Client, Summarizer)"];
        route_setup [label="API Routes Setup"];
    }
    
    subgraph cluster_search {
        label="Search Process";
        style=filled;
        color=lightgrey;
        fontsize=14;
        
        search_request [label="Search Request (UI)", fillcolor="cornflowerblue"];
        query_parsing [label="Query Parsing"];
        geo_search [label="GEO Database Search", fillcolor="cornflowerblue"];
        result_processing [label="Result Processing"];
        summarization [label="AI Summarization", fillcolor="cornflowerblue"];
        result_formatting [label="Result Formatting"];
    }
    
    subgraph cluster_frontend {
        label="Frontend Rendering";
        style=filled;
        color=lightgrey;
        fontsize=14;
        
        websocket_connect [label="WebSocket Connection", fillcolor="cornflowerblue"];
        progress_updates [label="Progress Updates"];
        results_display [label="Results Display", fillcolor="cornflowerblue"];
        error_handling [label="Error Handling"];
    }
    
    /* Define connections between nodes */
    
    server_start -> config_load;
    config_load -> ncbi_email_config;
    ncbi_email_config -> pipeline_init;
    pipeline_init -> component_init;
    component_init -> route_setup;
    
    search_request -> query_parsing;
    query_parsing -> geo_search;
    geo_search -> result_processing;
    result_processing -> summarization;
    summarization -> result_formatting;
    
    route_setup -> websocket_connect [constraint=false];
    websocket_connect -> progress_updates;
    result_formatting -> results_display;
    search_request -> progress_updates [style=dashed];
    progress_updates -> results_display;
    
    /* Add validation files as side nodes with dashed connections */
    
    /* Server Initialization Validation */
    test_server [label="tests/interface/test_server.py", shape=note, fillcolor="lightyellow"];
    test_pipeline_init [label="tests/pipeline/test_initialization.py", shape=note, fillcolor="lightyellow"];
    test_ncbi_config [label="test_ncbi_config.py", shape=note, fillcolor="lightyellow"];
    debug_pipeline [label="debug_pipeline.py", shape=note, fillcolor="lightyellow"];
    
    server_start -> test_server [style=dashed, dir=both];
    pipeline_init -> test_pipeline_init [style=dashed, dir=both];
    ncbi_email_config -> test_ncbi_config [style=dashed, dir=both];
    pipeline_init -> debug_pipeline [style=dashed, dir=both];
    
    /* Search Process Validation */
    test_geo_client [label="tests/geo_tools/test_geo_client.py", shape=note, fillcolor="lightyellow"];
    test_summarizer [label="tests/services/test_summarizer.py", shape=note, fillcolor="lightyellow"];
    test_nlp [label="tests/unit/test_nlp.py", shape=note, fillcolor="lightyellow"];
    test_search_pipeline [label="tests/e2e/test_search_pipeline.py", shape=note, fillcolor="lightyellow"];
    test_search_api [label="tests/interface/test_api_endpoints.py", shape=note, fillcolor="lightyellow"];
    
    geo_search -> test_geo_client [style=dashed, dir=both];
    summarization -> test_summarizer [style=dashed, dir=both];
    query_parsing -> test_nlp [style=dashed, dir=both];
    geo_search -> test_search_pipeline [style=dashed, dir=both];
    search_request -> test_search_api [style=dashed, dir=both];
    
    /* Frontend Validation */
    test_frontend [label="tests/interface/test_frontend.py", shape=note, fillcolor="lightyellow"];
    test_websocket [label="tests/interface/test_websocket.py", shape=note, fillcolor="lightyellow"];
    test_interface_integration [label="tests/e2e/test_interface_integration.py", shape=note, fillcolor="lightyellow"];
    
    results_display -> test_frontend [style=dashed, dir=both];
    websocket_connect -> test_websocket [style=dashed, dir=both];
    results_display -> test_interface_integration [style=dashed, dir=both];
    
    /* Monitoring Components */
    pipeline_monitor [label="src/omics_oracle/monitoring/pipeline_monitor.py", shape=note, fillcolor="lightgreen"];
    api_monitor [label="src/omics_oracle/monitoring/api_monitor.py", shape=note, fillcolor="lightgreen"];
    websocket_monitor [label="src/omics_oracle/monitoring/websocket_monitor.py", shape=note, fillcolor="lightgreen"];
    
    pipeline_init -> pipeline_monitor [style=dotted, dir=both];
    search_request -> api_monitor [style=dotted, dir=both];
    websocket_connect -> websocket_monitor [style=dotted, dir=both];
    
    /* Diagnostic Tools */
    system_diagnostics [label="tools/diagnostics/system_diagnostics.py", shape=note, fillcolor="lightpink"];
    api_diagnostics [label="tools/diagnostics/api_diagnostics.py", shape=note, fillcolor="lightpink"];
    frontend_diagnostics [label="tools/diagnostics/frontend_diagnostics.py", shape=note, fillcolor="lightpink"];
    
    server_start -> system_diagnostics [style=dotted, dir=both];
    search_request -> api_diagnostics [style=dotted, dir=both];
    results_display -> frontend_diagnostics [style=dotted, dir=both];
    
    /* Central Testing & Monitoring */
    omics_monitor [label="omics_monitor.py\n(Central Monitor)", shape=note, fillcolor="orange"];
    run_tests [label="run_tests.py\n(Test Runner)", shape=note, fillcolor="orange"];
    
    pipeline_monitor -> omics_monitor [style=dotted];
    api_monitor -> omics_monitor [style=dotted];
    websocket_monitor -> omics_monitor [style=dotted];
    
    test_pipeline_init -> run_tests [style=dotted];
    test_geo_client -> run_tests [style=dotted];
    test_summarizer -> run_tests [style=dotted];
    test_search_pipeline -> run_tests [style=dotted];
    test_frontend -> run_tests [style=dotted];
    test_interface_integration -> run_tests [style=dotted];
    
    /* Legend */
    subgraph cluster_legend {
        label="Legend";
        fontsize=12;
        style=filled;
        color=lightgrey;
        
        node [shape=box, width=2, height=0.5, fontsize=10];
        
        key_event [label="Key Event", fillcolor="cornflowerblue"];
        normal_event [label="Event"];
        
        node [shape=note, width=2, height=0.5, fontsize=10];
        
        test_file [label="Test/Validation File", fillcolor="lightyellow"];
        monitor_file [label="Monitoring Component", fillcolor="lightgreen"];
        diagnostic_file [label="Diagnostic Tool", fillcolor="lightpink"];
        central_file [label="Central Component", fillcolor="orange"];
        
        /* Invisible edges for layout */
        key_event -> normal_event [style=invis];
        normal_event -> test_file [style=invis];
        test_file -> monitor_file [style=invis];
        monitor_file -> diagnostic_file [style=invis];
        diagnostic_file -> central_file [style=invis];
    }
}
