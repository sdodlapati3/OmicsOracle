<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="2" failures="1" skipped="0" tests="3" time="0.035" timestamp="2025-06-27T00:04:32.851497-04:00" hostname="Sanjeevas-iMac.local"><testcase classname="test_geo_client" name="test_geo_search" time="0.000"><error message="failed on setup with &quot;file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py, line 50&#10;  async def test_geo_search(query, max_results=5):&#10;      &quot;&quot;&quot;Test GEO search functionality&quot;&quot;&quot;&#10;      try:&#10;          from src.omics_oracle.core.config import Config&#10;          from src.omics_oracle.geo_tools.geo_client import GEOClient&#10;&#10;          logger.info(f&quot;Testing GEO search with query: '{query}'&quot;)&#10;&#10;          # Create config and set NCBI email&#10;          config = Config()&#10;          if hasattr(config, &quot;ncbi&quot;):&#10;              setattr(config.ncbi, &quot;email&quot;, os.environ[&quot;NCBI_EMAIL&quot;])&#10;&#10;          # Initialize GEO client with caching disabled&#10;          geo_client = GEOClient(config, disable_cache=True)&#10;          logger.info(&quot;GEO client initialized&quot;)&#10;&#10;          # Perform search&#10;          start_time = time.time()&#10;          logger.info(&quot;Searching for GEO IDs...&quot;)&#10;          geo_ids = await geo_client.search_geo_ids(query, max_results=max_results)&#10;          search_time = time.time() - start_time&#10;&#10;          if geo_ids:&#10;              logger.info(f&quot;✓ Found {len(geo_ids)} GEO IDs in {search_time:.2f}s&quot;)&#10;              logger.info(f&quot;GEO IDs: {geo_ids}&quot;)&#10;              return geo_ids&#10;          else:&#10;              logger.warning(f&quot;✗ No GEO IDs found for query: '{query}'&quot;)&#10;              return []&#10;&#10;      except Exception as e:&#10;          logger.error(f&quot;✗ Error in GEO search: {e}&quot;)&#10;          logger.error(traceback.format_exc())&#10;          return []&#10;E       fixture 'query' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py:50&quot;">file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py, line 50
  async def test_geo_search(query, max_results=5):
      """Test GEO search functionality"""
      try:
          from src.omics_oracle.core.config import Config
          from src.omics_oracle.geo_tools.geo_client import GEOClient

          logger.info(f"Testing GEO search with query: '{query}'")

          # Create config and set NCBI email
          config = Config()
          if hasattr(config, "ncbi"):
              setattr(config.ncbi, "email", os.environ["NCBI_EMAIL"])

          # Initialize GEO client with caching disabled
          geo_client = GEOClient(config, disable_cache=True)
          logger.info("GEO client initialized")

          # Perform search
          start_time = time.time()
          logger.info("Searching for GEO IDs...")
          geo_ids = await geo_client.search_geo_ids(query, max_results=max_results)
          search_time = time.time() - start_time

          if geo_ids:
              logger.info(f"✓ Found {len(geo_ids)} GEO IDs in {search_time:.2f}s")
              logger.info(f"GEO IDs: {geo_ids}")
              return geo_ids
          else:
              logger.warning(f"✗ No GEO IDs found for query: '{query}'")
              return []

      except Exception as e:
          logger.error(f"✗ Error in GEO search: {e}")
          logger.error(traceback.format_exc())
          return []
E       fixture 'query' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py:50</error></testcase><testcase classname="test_geo_client" name="test_fetch_metadata" time="0.000"><error message="failed on setup with &quot;file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py, line 86&#10;  async def test_fetch_metadata(geo_ids):&#10;      &quot;&quot;&quot;Test fetching metadata for GEO IDs&quot;&quot;&quot;&#10;      if not geo_ids:&#10;          logger.warning(&quot;No GEO IDs provided for metadata fetch test&quot;)&#10;          return False&#10;&#10;      try:&#10;          from src.omics_oracle.core.config import Config&#10;          from src.omics_oracle.geo_tools.geo_client import GEOClient&#10;&#10;          logger.info(f&quot;Testing metadata fetch for {len(geo_ids)} GEO IDs&quot;)&#10;&#10;          # Create config and set NCBI email&#10;          config = Config()&#10;          if hasattr(config, &quot;ncbi&quot;):&#10;              setattr(config.ncbi, &quot;email&quot;, os.environ[&quot;NCBI_EMAIL&quot;])&#10;&#10;          # Initialize GEO client with caching disabled&#10;          geo_client = GEOClient(config, disable_cache=True)&#10;&#10;          # Fetch metadata for each GEO ID&#10;          for geo_id in geo_ids:&#10;              logger.info(f&quot;Fetching metadata for {geo_id}...&quot;)&#10;              start_time = time.time()&#10;              metadata = await geo_client.fetch_geo_metadata(geo_id)&#10;              fetch_time = time.time() - start_time&#10;&#10;              if metadata:&#10;                  logger.info(f&quot;✓ Successfully fetched metadata for {geo_id} in {fetch_time:.2f}s&quot;)&#10;                  # Log some metadata fields for verification&#10;                  if isinstance(metadata, dict):&#10;                      logger.info(f&quot;  Title: {metadata.get('title', 'N/A')}&quot;)&#10;                      logger.info(f&quot;  Summary: {(metadata.get('summary', 'N/A')[:100] + '...') if metadata.get('summary') else 'N/A'}&quot;)&#10;                      logger.info(f&quot;  Platform: {metadata.get('platform', 'N/A')}&quot;)&#10;                      logger.info(f&quot;  Organism: {metadata.get('organism', 'N/A')}&quot;)&#10;                  else:&#10;                      logger.warning(f&quot;  Unexpected metadata type: {type(metadata)}&quot;)&#10;              else:&#10;                  logger.warning(f&quot;✗ Failed to fetch metadata for {geo_id}&quot;)&#10;&#10;          return True&#10;      except Exception as e:&#10;          logger.error(f&quot;✗ Error in metadata fetch: {e}&quot;)&#10;          logger.error(traceback.format_exc())&#10;          return False&#10;E       fixture 'geo_ids' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py:86&quot;">file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py, line 86
  async def test_fetch_metadata(geo_ids):
      """Test fetching metadata for GEO IDs"""
      if not geo_ids:
          logger.warning("No GEO IDs provided for metadata fetch test")
          return False

      try:
          from src.omics_oracle.core.config import Config
          from src.omics_oracle.geo_tools.geo_client import GEOClient

          logger.info(f"Testing metadata fetch for {len(geo_ids)} GEO IDs")

          # Create config and set NCBI email
          config = Config()
          if hasattr(config, "ncbi"):
              setattr(config.ncbi, "email", os.environ["NCBI_EMAIL"])

          # Initialize GEO client with caching disabled
          geo_client = GEOClient(config, disable_cache=True)

          # Fetch metadata for each GEO ID
          for geo_id in geo_ids:
              logger.info(f"Fetching metadata for {geo_id}...")
              start_time = time.time()
              metadata = await geo_client.fetch_geo_metadata(geo_id)
              fetch_time = time.time() - start_time

              if metadata:
                  logger.info(f"✓ Successfully fetched metadata for {geo_id} in {fetch_time:.2f}s")
                  # Log some metadata fields for verification
                  if isinstance(metadata, dict):
                      logger.info(f"  Title: {metadata.get('title', 'N/A')}")
                      logger.info(f"  Summary: {(metadata.get('summary', 'N/A')[:100] + '...') if metadata.get('summary') else 'N/A'}")
                      logger.info(f"  Platform: {metadata.get('platform', 'N/A')}")
                      logger.info(f"  Organism: {metadata.get('organism', 'N/A')}")
                  else:
                      logger.warning(f"  Unexpected metadata type: {type(metadata)}")
              else:
                  logger.warning(f"✗ Failed to fetch metadata for {geo_id}")

          return True
      except Exception as e:
          logger.error(f"✗ Error in metadata fetch: {e}")
          logger.error(traceback.format_exc())
          return False
E       fixture 'geo_ids' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_geo_client.py:86</error></testcase><testcase classname="test_geo_client" name="test_rate_limiting_and_retries" time="0.001"><failure message="Failed: async def functions are not natively supported.&#10;You need to install a suitable plugin for your async framework, for example:&#10;  - anyio&#10;  - pytest-asyncio&#10;  - pytest-tornasync&#10;  - pytest-trio&#10;  - pytest-twisted">async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted</failure></testcase></testsuite></testsuites>
