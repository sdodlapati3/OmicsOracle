<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="1" failures="0" skipped="0" tests="1" time="1.584" timestamp="2025-06-27T00:04:40.690612-04:00" hostname="Sanjeevas-iMac.local"><testcase classname="test_progress_events" name="test_search_with_progress" time="0.001"><error message="failed on setup with &quot;file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_progress_events.py, line 55&#10;  async def test_search_with_progress(query: str):&#10;      &quot;&quot;&quot;Run a test search and track progress events.&quot;&quot;&quot;&#10;      start_time = time.time()&#10;      logger.info(f&quot;Starting test search: '{query}'&quot;)&#10;&#10;      # Load configuration&#10;      config = Config()&#10;&#10;      # Log configuration settings&#10;      logger.info(f&quot;NCBI Email: {getattr(config.ncbi, 'email', 'Not configured')}&quot;)&#10;      logger.info(f&quot;Config environment: {config.environment}&quot;)&#10;&#10;      # Initialize pipeline&#10;      pipeline = OmicsOracle(config)&#10;&#10;      # Set progress callback&#10;      pipeline.set_progress_callback(progress_callback)&#10;&#10;      try:&#10;          # Process query&#10;          result = await pipeline.process_query(&#10;              query=query,&#10;              max_results=10,&#10;              include_sra=False&#10;          )&#10;&#10;          # Log result summary&#10;          logger.info(f&quot;Search completed in {time.time() - start_time:.2f} seconds&quot;)&#10;          logger.info(f&quot;Status: {result.status.value}&quot;)&#10;          logger.info(f&quot;GEO IDs found: {len(result.geo_ids)}&quot;)&#10;          logger.info(f&quot;Metadata entries: {len(result.metadata)}&quot;)&#10;          logger.info(f&quot;Progress events: {len(progress_events)}&quot;)&#10;&#10;          # Check if any GEO IDs were found&#10;          if not result.geo_ids:&#10;              logger.warning(&quot;No GEO IDs were found. This might indicate a configuration issue.&quot;)&#10;&#10;              # Check NCBI client configuration&#10;              if hasattr(pipeline.geo_client, '_client') and hasattr(pipeline.geo_client._client, 'email'):&#10;                  logger.info(f&quot;NCBI client email: {pipeline.geo_client._client.email}&quot;)&#10;              else:&#10;                  logger.error(&quot;NCBI client email not properly configured!&quot;)&#10;&#10;          # Write progress events to file&#10;          with open(&quot;progress_events.log&quot;, &quot;w&quot;) as f:&#10;              for i, event in enumerate(progress_events):&#10;                  f.write(f&quot;Event {i+1}: {event['stage']} - {event['message']} ({event['percentage']:.1f}%)\n&quot;)&#10;                  if event[&quot;detail&quot;]:&#10;                      f.write(f&quot;  Details: {event['detail']}\n&quot;)&#10;                  f.write(&quot;\n&quot;)&#10;&#10;          return result&#10;&#10;      except Exception as e:&#10;          logger.error(f&quot;Error during search: {str(e)}&quot;, exc_info=True)&#10;          raise&#10;      finally:&#10;          # Clean up&#10;          await pipeline.close()&#10;E       fixture 'query' not found&#10;&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_progress_events.py:55&quot;">file /Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_progress_events.py, line 55
  async def test_search_with_progress(query: str):
      """Run a test search and track progress events."""
      start_time = time.time()
      logger.info(f"Starting test search: '{query}'")

      # Load configuration
      config = Config()

      # Log configuration settings
      logger.info(f"NCBI Email: {getattr(config.ncbi, 'email', 'Not configured')}")
      logger.info(f"Config environment: {config.environment}")

      # Initialize pipeline
      pipeline = OmicsOracle(config)

      # Set progress callback
      pipeline.set_progress_callback(progress_callback)

      try:
          # Process query
          result = await pipeline.process_query(
              query=query,
              max_results=10,
              include_sra=False
          )

          # Log result summary
          logger.info(f"Search completed in {time.time() - start_time:.2f} seconds")
          logger.info(f"Status: {result.status.value}")
          logger.info(f"GEO IDs found: {len(result.geo_ids)}")
          logger.info(f"Metadata entries: {len(result.metadata)}")
          logger.info(f"Progress events: {len(progress_events)}")

          # Check if any GEO IDs were found
          if not result.geo_ids:
              logger.warning("No GEO IDs were found. This might indicate a configuration issue.")

              # Check NCBI client configuration
              if hasattr(pipeline.geo_client, '_client') and hasattr(pipeline.geo_client._client, 'email'):
                  logger.info(f"NCBI client email: {pipeline.geo_client._client.email}")
              else:
                  logger.error("NCBI client email not properly configured!")

          # Write progress events to file
          with open("progress_events.log", "w") as f:
              for i, event in enumerate(progress_events):
                  f.write(f"Event {i+1}: {event['stage']} - {event['message']} ({event['percentage']:.1f}%)\n")
                  if event["detail"]:
                      f.write(f"  Details: {event['detail']}\n")
                  f.write("\n")

          return result

      except Exception as e:
          logger.error(f"Error during search: {str(e)}", exc_info=True)
          raise
      finally:
          # Clean up
          await pipeline.close()
E       fixture 'query' not found
&gt;       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cov, doctest_namespace, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/sanjeevadodlapati/Downloads/Repos/OmicsOracle/test_progress_events.py:55</error></testcase></testsuite></testsuites>
