version: '3.8'

services:
  # Main Futuristic Interface
  omics-oracle:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: omics-oracle-main
    ports:
      - "${MAIN_PORT:-8001}:${INTERNAL_PORT:-8001}"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=${DATABASE_URL:-mongodb://mongodb:27017}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NCBI_API_KEY=${NCBI_API_KEY}
      - NCBI_EMAIL=${NCBI_EMAIL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key}
      - DEBUG=${DEBUG:-true}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - ${DATABASE_SERVICE:-mongodb}
      - redis
    restart: unless-stopped
    networks:
      - omics-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${INTERNAL_PORT:-8001}/api/v2/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Legacy Interface (Optional Fallback)
  omics-oracle-legacy:
    build: .
    container_name: omics-oracle-legacy
    ports:
      - "${LEGACY_PORT:-8000}:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=${DATABASE_URL:-mongodb://mongodb:27017}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NCBI_API_KEY=${NCBI_API_KEY}
      - NCBI_EMAIL=${NCBI_EMAIL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - ${DATABASE_SERVICE:-mongodb}
      - redis
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - legacy

  # MongoDB (Development)
  mongodb:
    image: mongo:7.0
    container_name: omics-oracle-mongodb
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-omics_oracle}
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - dev
      - default

  # PostgreSQL (Production)
  postgres:
    image: postgres:16-alpine
    container_name: omics-oracle-postgres
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-omics_oracle}
      - POSTGRES_USER=${POSTGRES_USER:-omics}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - production

  # Redis cache
  redis:
    image: redis:7.2-alpine
    container_name: omics-oracle-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - omics-network

  # Frontend (Optional)
  frontend:
    build: ./frontend
    container_name: omics-oracle-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:${MAIN_PORT:-8001}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - omics-oracle
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - frontend

  # Jupyter (Optional)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: omics-oracle-jupyter
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - jupyter

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: omics-oracle-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - omics-oracle
    restart: unless-stopped
    networks:
      - omics-network
    profiles:
      - production

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  omics-network:
    driver: bridge
