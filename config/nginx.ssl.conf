# SSL/TLS Configuration for Nginx (Production)
# Place SSL certificates in config/ssl/ directory

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main buffer=16k flush=2m;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=search:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=3r/s;

    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream servers
    upstream futuristic_backend {
        server omics-oracle:8001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream legacy_backend {
        server omics-oracle-legacy:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'none'; frame-src 'none'; worker-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self'; manifest-src 'self';" always;

    # Redirect HTTP to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        # Security headers even for redirects
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name your-domain.com www.your-domain.com;

        # SSL certificate paths (update these)
        ssl_certificate /etc/ssl/certs/omics_oracle.crt;
        ssl_certificate_key /etc/ssl/private/omics_oracle.key;
        ssl_trusted_certificate /etc/ssl/certs/omics_oracle_chain.crt;

        # Connection and rate limiting
        limit_conn addr 50;
        limit_req zone=api burst=20 nodelay;

        # Health check endpoint (no auth required)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Main futuristic interface
        location / {
            proxy_pass http://futuristic_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # Proxy timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Security
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
        }

        # Legacy interface
        location /legacy {
            limit_req zone=api burst=15 nodelay;

            rewrite ^/legacy/?(.*) /$1 break;
            proxy_pass http://legacy_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API endpoints with enhanced rate limiting
        location /api/ {
            limit_req zone=api burst=30 nodelay;

            proxy_pass http://futuristic_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # API-specific headers
            add_header X-API-Version "2.0" always;
            add_header X-RateLimit-Limit "600" always;
            add_header X-RateLimit-Remaining "599" always;

            # CORS for API
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $http_origin;
                add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # Search endpoints with stricter rate limiting
        location ~* ^/api/.*/search {
            limit_req zone=search burst=10 nodelay;

            proxy_pass http://futuristic_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Search-specific caching
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
        }

        # Authentication endpoints with strict rate limiting
        location ~* ^/api/.*/auth {
            limit_req zone=auth burst=5 nodelay;

            proxy_pass http://futuristic_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # No caching for auth
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }

        # Static files with aggressive caching
        location /static/ {
            proxy_pass http://futuristic_backend;
            proxy_cache_valid 200 1d;
            expires 1d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;

            # Disable access log for static files
            access_log off;
        }

        # Media files
        location /media/ {
            proxy_pass http://futuristic_backend;
            proxy_cache_valid 200 1h;
            expires 1h;
            add_header Cache-Control "public";
        }

        # Favicon
        location = /favicon.ico {
            proxy_pass http://futuristic_backend;
            expires 1d;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Robots.txt
        location = /robots.txt {
            proxy_pass http://futuristic_backend;
            expires 1d;
            add_header Cache-Control "public";
            access_log off;
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Error pages
        error_page 400 401 403 404 /40x.html;
        location = /40x.html {
            root /usr/share/nginx/html;
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Custom error page for rate limiting
        error_page 429 /rate_limit.html;
        location = /rate_limit.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Server for API subdomain (optional)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.your-domain.com;

        # SSL certificate
        ssl_certificate /etc/ssl/certs/omics_oracle.crt;
        ssl_certificate_key /etc/ssl/private/omics_oracle.key;
        ssl_trusted_certificate /etc/ssl/certs/omics_oracle_chain.crt;

        # Rate limiting for API subdomain
        limit_conn addr 20;
        limit_req zone=api burst=50 nodelay;

        # All requests go to API
        location / {
            proxy_pass http://futuristic_backend/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;

            # API-specific headers
            add_header X-API-Version "2.0" always;
            add_header Access-Control-Allow-Origin "*" always;
        }
    }
}
