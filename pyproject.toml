[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "omics-oracle"
dynamic = ["version"]
description = "AI-Powered Genomics Data Summary Agent"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "OmicsOracle Team", email = "team@omicsoracle.ai"},
]
maintainers = [
    {name = "OmicsOracle Team", email = "team@omicsoracle.ai"},
]
keywords = ["genomics", "bioinformatics", "ai", "data-analysis", "geo-metadata"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    "openai>=1.3.0",
    "langchain>=0.0.340",
    "langchain-openai>=0.0.2",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "biopython>=1.81",
    "pymongo>=4.6.0",
    "motor>=3.3.0",
    "redis>=5.0.0",
    "chromadb>=0.4.0",
    "click>=8.1.0",
    "loguru>=0.7.0",
    "pyyaml>=6.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipython>=8.16.0",
    "notebook>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/OmicsOracle"
Documentation = "https://omicsoracle.readthedocs.io/"
Repository = "https://github.com/your-org/OmicsOracle.git"
Issues = "https://github.com/your-org/OmicsOracle/issues"

[project.scripts]
omics-oracle = "omics_oracle.cli:main"

[tool.setuptools]
packages = ["omics_oracle"]
package-dir = {"" = "src"}

[tool.setuptools_scm]
write_to = "src/omics_oracle/_version.py"

[tool.black]
# Updated to 110 characters for consistency with flake8
line-length = 110
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  # auto-generated files
  | src/omics_oracle/_version\.py
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
# Match Black's line length for consistency
line_length = 110
known_first_party = ["omics_oracle"]

[tool.flake8]
# Consistent 110 character limit across all tools
max-line-length = 110
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "W503",  # line break before binary operator (conflicts with black)
    "W293",  # blank line contains whitespace (not critical)
    "C901",  # function is too complex (legacy code)
    "F824"   # unused global variable (legacy code)
]
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    "venv",
    "build",
    "dist",
    "src/omics_oracle/_version.py"  # auto-generated file
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "biopython",
    "Bio.*",
    "chromadb",
    "langchain.*",
    "yaml",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config -v --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.pytest_asyncio]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]
